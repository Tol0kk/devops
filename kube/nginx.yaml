kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
  namespace: doodle
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
      worker_connections 1024;
    }

    http {
      include /etc/nginx/mime.types;
      sendfile on;
      keepalive_timeout 65;

      # HTTP server - redirects to HTTPS
      # server {
      #   listen 80;
      #   server_name _;
        
      #   # Redirect all HTTP requests to HTTPS
      #   location / {
      #     return 301 https://$host$request_uri;
      #   }
      # }

      # HTTPS server
      server {
        listen 80;
        # listen 443 ssl;
        # server_name _;

        # # TLS configuration
        # ssl_certificate /etc/nginx/ssl/tls.crt;
        # ssl_certificate_key /etc/nginx/ssl/tls.key;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers HIGH:!aNULL:!MD5;
        # ssl_prefer_server_ciphers on;

        # Frontend route
        location / {
          proxy_pass http://front:80;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API route
        location /api/ {
          proxy_pass http://api:8080/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Etherpad route
        location /etherpad/ {
          proxy_pass http://etherpad:9001/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
      }
    }
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nginx-gateway
  namespace: doodle
  labels:
    k8s-app: nginx-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: nginx-gateway
  template:
    metadata:
      name: nginx-gateway
      labels:
        k8s-app: nginx-gateway
    spec:
      containers:
        - name: nginx
          image: nginx:1.21
          ports:
            - containerPort: 80
            - containerPort: 443
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            # - name: tls-certs
            #   mountPath: /etc/nginx/ssl
          securityContext:
            privileged: false
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        # - name: tls-certs
        #   secret:
        #     secretName: nginx-tls-secret
      restartPolicy: Always
      dnsPolicy: ClusterFirst
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
---
kind: Service
apiVersion: v1
metadata:
  name: nginx-gateway
  namespace: doodle
  labels:
    k8s-app: nginx-gateway
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30081
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443
      nodePort: 30443
  selector:
    k8s-app: nginx-gateway
